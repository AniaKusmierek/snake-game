{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","document","onkeydown","this","setInterval","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","gameOver","snake","pop","forEach","enlargeSnake","newSnake","unshift","alert","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6df53784.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n    return (\n        <div>\n            {props.snakeDots.map((dot, i) => {\n                const style = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`\n                }\n                // console.log(dot[0], dot[1]);\n                return (\n                    <div className=\"snake-dot\" key={i} style={style}></div>\n                )\n            })}\n        </div>\n    )\n}","import React from 'react';\n\nexport default (props) => {\n    const style = {\n        left: `${props.dot[0]}%`,\n        top: `${props.dot[1]}%`\n    }\n    return (\n        <div className=\"snake-food\" style={style}></div>\n\n    )\n}","import React, {Component} from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x, y];\n}\nconst initialState = \n{\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [\n  [0, 0],\n  [2, 0]\n]\n}\nclass App extends Component {\n  state = initialState;\n\n  componentDidMount () {\n    document.onkeydown = this.onKeyDown;\n    setInterval(() => {\n      this.moveSnake()\n    }, this.state.speed);\n  }\n  componentDidUpdate () {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n    //if I want to catch properly the event in every browsers:\n    e = e || window.event;\n    switch(e.keyCode) {\n      case 37: \n        this.setState({direction: 'LEFT'});\n        break;\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      default: return;\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n          case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n          default: return;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders () {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if(head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if(head[0] === dot[0] && head[1] === dot[1]) {\n        this.gameOver();\n      }\n    })\n  }\n\n  checkIfEat () {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if(head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n    }\n\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  gameOver () {\n    alert(`Game over! Snake length is ${this.state.snakeDots.length}`);\n      this.setState(initialState);\n  }\n\n  render() {\n  return (\n    <div className=\"game-area\">\n      <Snake snakeDots={this.state.snakeDots}/>\n      <Food dot={this.state.food}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}